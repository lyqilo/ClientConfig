//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg.game
{
public sealed partial class GameConfig :  Bright.Config.BeanBase 
{
    public GameConfig(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        ScenName = _buf.ReadString();
        UiName = _buf.ReadString();
        GameName = _buf.ReadString();
        ClientId = _buf.ReadInt();
        OtherClientId = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BL = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); BL.Add(_e0);}}
        Orientation = _buf.ReadString();
        StartScriptName = _buf.ReadString();
        RootName = _buf.ReadString();
        LuaPath = _buf.ReadString();
        LuaRootName = _buf.ReadString();
        DriveType = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DownFiles = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); DownFiles.Add(_e0);}}
        PostInit();
    }

    public static GameConfig DeserializeGameConfig(ByteBuf _buf)
    {
        return new game.GameConfig(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 场景名
    /// </summary>
    public string ScenName { get; private set; }
    /// <summary>
    /// 游戏名
    /// </summary>
    public string UiName { get; private set; }
    /// <summary>
    /// 游戏英文名
    /// </summary>
    public string GameName { get; private set; }
    /// <summary>
    /// 关联服务器游戏id
    /// </summary>
    public int ClientId { get; private set; }
    /// <summary>
    /// 自定义游戏id
    /// </summary>
    public int OtherClientId { get; private set; }
    /// <summary>
    /// 倍率
    /// </summary>
    public System.Collections.Generic.List<string> BL { get; private set; }
    /// <summary>
    /// 屏幕方向
    /// </summary>
    public string Orientation { get; private set; }
    /// <summary>
    /// 启动脚本名（C#）
    /// </summary>
    public string StartScriptName { get; private set; }
    /// <summary>
    /// 根节点名
    /// </summary>
    public string RootName { get; private set; }
    /// <summary>
    /// lua脚本路径
    /// </summary>
    public string LuaPath { get; private set; }
    /// <summary>
    /// lua脚本根节点名
    /// </summary>
    public string LuaRootName { get; private set; }
    /// <summary>
    /// 启动脚本类型
    /// </summary>
    public string DriveType { get; private set; }
    /// <summary>
    /// 更新目录
    /// </summary>
    public System.Collections.Generic.List<string> DownFiles { get; private set; }

    public const int __ID__ = -1796234896;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ScenName:" + ScenName + ","
        + "UiName:" + UiName + ","
        + "GameName:" + GameName + ","
        + "ClientId:" + ClientId + ","
        + "OtherClientId:" + OtherClientId + ","
        + "BL:" + Bright.Common.StringUtil.CollectionToString(BL) + ","
        + "Orientation:" + Orientation + ","
        + "StartScriptName:" + StartScriptName + ","
        + "RootName:" + RootName + ","
        + "LuaPath:" + LuaPath + ","
        + "LuaRootName:" + LuaRootName + ","
        + "DriveType:" + DriveType + ","
        + "DownFiles:" + Bright.Common.StringUtil.CollectionToString(DownFiles) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}