//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/*
GameConfig.cs
Create By Ben
*/

using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;

namespace cfg.game
{ 

public sealed partial class GameConfig :  Bright.Config.BeanBase 
{
    public GameConfig(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["scenName"].IsString) { throw new SerializationException(); }  ScenName = _json["scenName"]; }
        { if(!_json["gameStatus"].IsNumber) { throw new SerializationException(); }  GameStatus = _json["gameStatus"]; }
        { if(!_json["uiName"].IsString) { throw new SerializationException(); }  UiName = _json["uiName"]; }
        { if(!_json["gameName"].IsString) { throw new SerializationException(); }  GameName = _json["gameName"]; }
        { if(!_json["clientId"].IsNumber) { throw new SerializationException(); }  ClientId = _json["clientId"]; }
        { if(!_json["otherClientId"].IsNumber) { throw new SerializationException(); }  OtherClientId = _json["otherClientId"]; }
        { var __json0 = _json["BL"]; if(!__json0.IsArray) { throw new SerializationException(); } BL = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  BL.Add(__v0); }   }
        { if(!_json["Orientation"].IsString) { throw new SerializationException(); }  Orientation = _json["Orientation"]; }
        { if(!_json["StartScriptName"].IsString) { throw new SerializationException(); }  StartScriptName = _json["StartScriptName"]; }
        { if(!_json["rootName"].IsString) { throw new SerializationException(); }  RootName = _json["rootName"]; }
        { if(!_json["luaPath"].IsString) { throw new SerializationException(); }  LuaPath = _json["luaPath"]; }
        { if(!_json["luaRootName"].IsString) { throw new SerializationException(); }  LuaRootName = _json["luaRootName"]; }
        { if(!_json["driveType"].IsString) { throw new SerializationException(); }  DriveType = _json["driveType"]; }
        { var __json0 = _json["downFiles"]; if(!__json0.IsArray) { throw new SerializationException(); } DownFiles = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  DownFiles.Add(__v0); }   }
        PostInit();
    }

    public GameConfig(int ID, string scenName, int gameStatus, string uiName, string gameName, int clientId, int otherClientId, System.Collections.Generic.List<string> BL, string Orientation, string StartScriptName, string rootName, string luaPath, string luaRootName, string driveType, System.Collections.Generic.List<string> downFiles ) 
    {
        this.ID = ID;
        this.ScenName = scenName;
        this.GameStatus = gameStatus;
        this.UiName = uiName;
        this.GameName = gameName;
        this.ClientId = clientId;
        this.OtherClientId = otherClientId;
        this.BL = BL;
        this.Orientation = Orientation;
        this.StartScriptName = StartScriptName;
        this.RootName = rootName;
        this.LuaPath = luaPath;
        this.LuaRootName = luaRootName;
        this.DriveType = driveType;
        this.DownFiles = downFiles;
        PostInit();
    }

    public static GameConfig DeserializeGameConfig(JSONNode _json)
    {
        return new game.GameConfig(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 场景名
    /// </summary>
    public string ScenName { get; private set; }
    /// <summary>
    /// 游戏状态(0：可用，1：制作中，2：不可用)
    /// </summary>
    public int GameStatus { get; private set; }
    /// <summary>
    /// 游戏名
    /// </summary>
    public string UiName { get; private set; }
    /// <summary>
    /// 游戏英文名
    /// </summary>
    public string GameName { get; private set; }
    /// <summary>
    /// 关联服务器游戏id
    /// </summary>
    public int ClientId { get; private set; }
    /// <summary>
    /// 自定义游戏id
    /// </summary>
    public int OtherClientId { get; private set; }
    /// <summary>
    /// 倍率
    /// </summary>
    public System.Collections.Generic.List<string> BL { get; private set; }
    /// <summary>
    /// 屏幕方向
    /// </summary>
    public string Orientation { get; private set; }
    /// <summary>
    /// 启动脚本名（C#）
    /// </summary>
    public string StartScriptName { get; private set; }
    /// <summary>
    /// 根节点名
    /// </summary>
    public string RootName { get; private set; }
    /// <summary>
    /// lua脚本路径
    /// </summary>
    public string LuaPath { get; private set; }
    /// <summary>
    /// lua脚本根节点名
    /// </summary>
    public string LuaRootName { get; private set; }
    /// <summary>
    /// 启动脚本类型
    /// </summary>
    public string DriveType { get; private set; }
    /// <summary>
    /// 更新目录
    /// </summary>
    public System.Collections.Generic.List<string> DownFiles { get; private set; }

    public const int __ID__ = -1796234896;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ScenName:" + ScenName + ","
        + "GameStatus:" + GameStatus + ","
        + "UiName:" + UiName + ","
        + "GameName:" + GameName + ","
        + "ClientId:" + ClientId + ","
        + "OtherClientId:" + OtherClientId + ","
        + "BL:" + Bright.Common.StringUtil.CollectionToString(BL) + ","
        + "Orientation:" + Orientation + ","
        + "StartScriptName:" + StartScriptName + ","
        + "RootName:" + RootName + ","
        + "LuaPath:" + LuaPath + ","
        + "LuaRootName:" + LuaRootName + ","
        + "DriveType:" + DriveType + ","
        + "DownFiles:" + Bright.Common.StringUtil.CollectionToString(DownFiles) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
